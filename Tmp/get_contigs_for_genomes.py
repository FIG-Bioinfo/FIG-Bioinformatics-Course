########################################################################
#...Prompt that generated this program:
"""
Please write a python program named 'get_contigs_for_genomes.py' that:

* Accepts the follwing two named arguments
  - Filename of	a tab-separated-value list containing genome-IDs
    short name '-G', long name '--genome-list'

  - Name of an output directory, short name '-D',
    long-name '--output-data'

* Reads	the genome-ID file, skips the	header-line,
and loads the remainder of the first column into	a list.

* Creates the output directory if it does not already exist,
  else warns the user and exits

* Foreach genome-ID in the	genome-list,	prints a progress-message to STDERR,
and then executes the command described by the following format:

   f"p3-genome-fasta --contigs {genome_ID} > {Output_Directory}/{genome_ID}.fna"

If the command fails, print an error-message to	STDERR,	and then exit.
"""

########################################################################
#...Pseudocode for this program:
"""
BEGIN
    PROCEDURE Main;
    VAR args, genome_list_file, output_directory, genome_ids;
    BEGIN
        args := ParseArguments;
        genome_list_file := args.genome_list;
        output_directory := args.output_data;

        genome_ids := ReadGenomeIDs(genome_list_file);
        CreateOutputDirectory(output_directory);
        FetchContigs(genome_ids, output_directory);
    END;

    PROCEDURE ParseArguments;
    VAR arguments;
    BEGIN
        INITIATE ArgumentParser;
        ADD_ARGUMENT '-G', '--genome-list', REQUIRED;
        ADD_ARGUMENT '-D', '--output-data', REQUIRED;
        RETURN PARSED_ARGUMENTS;
    END;

    PROCEDURE ReadGenomeIDs(file_path);
    VAR file, lines, genome_ids;
    BEGIN
        TRY
            OPEN file_path FOR READING;
            lines := READ_ALL_LINES(file);
            genome_ids := FOR EACH line IN lines[1..] DO EXTRACT_FIRST_COLUMN(line);
            RETURN genome_ids;
        EXCEPT
            PRINT "Error reading genome list file";
            EXIT(1);
        END;
    END;

    PROCEDURE CreateOutputDirectory(output_dir);
    BEGIN
        IF DIRECTORY_EXISTS(output_dir) THEN
        BEGIN
            PRINT "Error: Output directory already exists";
            EXIT(1);
        END;
        ELSE
        BEGIN
            TRY
                CREATE_DIRECTORY(output_dir);
            EXCEPT
                PRINT "Error creating output directory";
                EXIT(1);
            END;
        END;
    END;

    PROCEDURE FetchContigs(genome_ids, output_dir);
    VAR genome_id, output_file, command;
    BEGIN
        FOR EACH genome_id IN genome_ids DO
        BEGIN
            PRINT "Processing genome ID: ", genome_id;
            output_file := CONCATENATE(output_dir, "/", genome_id, ".fna");
            command := CONCATENATE("p3-genome-fasta --contigs ", genome_id, " > ", output_file);
            TRY
                EXECUTE(command);
            EXCEPT
                PRINT "Error fetching contigs for genome ID: ", genome_id;
                EXIT(1);
            END;
        END;
    END;
END;
"""

########################################################################
#...Code generated by Grimoire:
import os
import sys
import argparse
import subprocess


def parse_arguments():
    parser = argparse.ArgumentParser(description="Fetch contigs for genomes")
    parser.add_argument('-G', '--genome-list', required=True, help="Filename of the TSV list containing genome IDs")
    parser.add_argument('-D', '--output-data', required=True, help="Name of the output directory")
    return parser.parse_args()


def read_genome_ids(file_path):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()
        # Skip the header and load the first column
        genome_ids = [line.split('\t')[0].strip() for line in lines[1:]]
        return genome_ids
    except Exception as e:
        print(f"Error reading genome list file: {e}", file=sys.stderr)
        sys.exit(1)


def create_output_directory(output_dir):
    if os.path.exists(output_dir):
        print(f"Error: Output directory '{output_dir}' already exists.", file=sys.stderr)
        sys.exit(1)
    try:
        os.makedirs(output_dir)
    except Exception as e:
        print(f"Error creating output directory: {e}", file=sys.stderr)
        sys.exit(1)


def fetch_contigs(genome_ids, output_dir):
    for genome_id in genome_ids:
        print(f"Processing genome ID: {genome_id}", file=sys.stderr)
        output_file = os.path.join(output_dir, f"{genome_id}.fna")
        command = f"p3-genome-fasta --contigs {genome_id} > {output_file}"
        try:
            result = subprocess.run(command, shell=True, check=True, stderr=subprocess.PIPE)
        except subprocess.CalledProcessError as e:
            print(f"Error fetching contigs for genome ID {genome_id}: {e.stderr.decode('utf-8')}", file=sys.stderr)
            sys.exit(1)


def main():
    args = parse_arguments()
    genome_list_file = args.genome_list
    output_directory = args.output_data

    genome_ids = read_genome_ids(genome_list_file)
    create_output_directory(output_directory)
    fetch_contigs(genome_ids, output_directory)


if __name__ == "__main__":
    main()
