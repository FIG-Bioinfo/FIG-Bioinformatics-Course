########################################################################
#...Prompt that generated this program:
"""
Write a Python script named `fastq_to_fasta_batch.py` with the following behavior:

- It takes one required command-line argument: a path to a top-level directory.
- Each subdirectory in that directory is named with an SRA ID (e.g. SRR123456).
- Inside each SRA ID directory, there is a `FASTQ/` subdirectory that may contain `.fastq` files.

For each `.fastq` file inside each `FASTQ/` subdirectory:

1. Read and convert the contents of the FASTQ file to a FASTA format using pure Python logic.
2. Create a corresponding `FASTA/` subdirectory under the same SRA ID directory (if it does not exist).
3. Write each converted FASTA file with the same basename, replacing `.fastq` with `.fasta`.

Do not use external tools like `seqtk` or `fastq-dump`.
Use only Python’s built-in `open()` and string operations to perform the conversion:
- Each FASTQ record consists of four lines: `@header`, sequence, `+`, quality.
- Write only the header and sequence to the FASTA file, like:
"""

########################################################################
#...Pseudocode for this program:
"""
FUNCTION main():
    PARSE command-line argument:
        directory ← required argument, path to top-level directory containing SRA-ID subdirectories

    CALL process_sra_dir(directory)


FUNCTION process_sra_dir(root_dir):
    total ← 0
    converted ← 0

    FOR EACH sra_id IN LIST_DIRECTORY(root_dir):
        sra_path ← CONCAT(root_dir, "/", sra_id)
        fastq_dir ← CONCAT(sra_path, "/FASTQ")
        fasta_dir ← CONCAT(sra_path, "/FASTA")

        IF fastq_dir IS NOT A DIRECTORY:
            CONTINUE TO NEXT sra_id

        CREATE_DIRECTORY_IF_NOT_EXISTS(fasta_dir)

        FOR EACH file_name IN LIST_DIRECTORY(fastq_dir):
            IF NOT file_name ENDS_WITH ".fastq":
                CONTINUE

            fastq_path ← CONCAT(fastq_dir, "/", file_name)
            fasta_name ← REPLACE_EXTENSION(file_name, ".fasta")
            fasta_path ← CONCAT(fasta_dir, "/", fasta_name)

            PRINT_INFO("Converting fastq_path → fasta_path")
            success ← convert_fastq_to_fasta(fastq_path, fasta_path)

            IF success:
                INCREMENT converted
            INCREMENT total

    PRINT_INFO("Summary: Converted converted of total FASTQ files.")


FUNCTION convert_fastq_to_fasta(fastq_path, fasta_path):
    TRY:
        OPEN fastq_path FOR READING AS fq
        OPEN fasta_path FOR WRITING AS fa

        LOOP:
            header ← READ_LINE(fq)
            seq ← READ_LINE(fq)
            plus ← READ_LINE(fq)
            qual ← READ_LINE(fq)

            IF header IS EMPTY OR seq IS EMPTY OR qual IS EMPTY:
                BREAK LOOP

            fasta_header ← ">" + REMOVE_PREFIX(header, "@")
            WRITE_LINE(fa, fasta_header)
            WRITE_LINE(fa, TRIM(seq))

        RETURN TRUE
    CATCH error:
        PRINT_ERROR("Failed to convert fastq_path: error")
        RETURN FALSE


FUNCTION PRINT_INFO(message):
    OUTPUT "[INFO] " + message TO STDERR

FUNCTION PRINT_ERROR(message):
    OUTPUT "[ERROR] " + message TO STDERR
"""

########################################################################
#...Code generated by Grimoire:
#!/usr/bin/env python3

import os
import sys
import argparse

def print_info(msg):
    print(f"[INFO] {msg}", file=sys.stderr)

def convert_fastq_to_fasta(fastq_path, fasta_path):
    """Convert FASTQ to FASTA using built-in logic."""
    try:
        with open(fastq_path, 'r') as fq, open(fasta_path, 'w') as fa:
            while True:
                header = fq.readline()
                seq    = fq.readline()
                plus   = fq.readline()
                qual   = fq.readline()

                if not qual:  # End of file or malformed
                    break

                fasta_header = ">" + header[1:].strip()
                sequence = seq.strip()
                fa.write(f"{fasta_header}\n{sequence}\n")
        return True
    except Exception as e:
        print(f"[ERROR] Failed to convert {fastq_path}: {e}", file=sys.stderr)
        return False

def process_sra_dir(root_dir):
    total = 0
    converted = 0

    for sra_id in os.listdir(root_dir):
        sra_path = os.path.join(root_dir, sra_id)
        fastq_dir = os.path.join(sra_path, "FASTQ")
        fasta_dir = os.path.join(sra_path, "FASTA")

        if not os.path.isdir(fastq_dir):
            continue

        os.makedirs(fasta_dir, exist_ok=True)

        for filename in os.listdir(fastq_dir):
            if not filename.endswith(".fastq"):
                continue

            fastq_path = os.path.join(fastq_dir, filename)
            fasta_name = os.path.splitext(filename)[0] + ".fasta"
            fasta_path = os.path.join(fasta_dir, fasta_name)

            print_info(f"Converting {fastq_path} → {fasta_path}")
            if convert_fastq_to_fasta(fastq_path, fasta_path):
                converted += 1
            total += 1

    print_info(f"Summary: Converted {converted} of {total} FASTQ files.")

def main():
    parser = argparse.ArgumentParser(description="Convert FASTQ to FASTA inside subdirs of given root dir.")
    parser.add_argument("directory", help="Top-level directory containing SRA-ID subdirs with FASTQ/")
    args = parser.parse_args()

    process_sra_dir(args.directory)

if __name__ == "__main__":
    main()
