########################################################################
#...Prompt that generated this program:
"""
Please write a Python script named `sra_fastq_download.py` that performs the following:

- Accepts the following command-line arguments:
  - `-i` or `--id-file` (required): Path to a text file containing a list of SRA IDs (one per line)
  - `-d` or `--download-directory` (required): Directory where extracted FASTQ files should be stored
  - `-c` or `--sra-cache` (optional): Directory to cache `.sra` files. If not specified, use the environment variable `COURSE_HOME`, falling back to `~/NCBI/public/sra`
  - `-D` or `--Debug` (optional flag): Print debug messages to STDERR

Behavior:

1. For each SRA ID:
   - Download the `.sra` file using `prefetch` into the cache directory
   - Extract the `.sra` file using `fasterq-dump` into:
     {download_directory}/{sra_id}/FASTQ/
   - If `fasterq-dump` fails, skip and print a warning
   - Create any missing output directories as needed

2. Print all `[INFO]` messages to STDERR
3. If debug is enabled, also print `[DEBUG]` messages showing the shell commands executed
4. After processing all SRA IDs, print a summary showing:
   - Total SRA IDs requested
   - Number of successful FASTQ extractions

Implementation constraints:

- Use `subprocess.run()` to call both `prefetch` and `fasterq-dump`
- Use `os.environ.get("COURSE_HOME", os.path.expanduser("~"))` to determine the default SRA cache path if `--sra-cache` is not specified
- Do not convert to FASTA or delete `.sra` files
- The script must be production-ready, modular, and runnable like this:

  ```bash
  python sra_fastq_download.py -i my_ids.txt -d ./outputs
  ```
"""

########################################################################
#...Pseudocode for this program:
"""
FUNCTION main():
    PARSE command-line arguments:
        id_file <- required string input
        download_directory <- required string input
        sra_cache <- optional string input (default: COURSE_HOME/NCBI/public/sra)
        debug <- boolean flag

    CALL process_sra_list(id_file, download_directory, sra_cache, debug)


FUNCTION process_sra_list(id_file, download_directory, sra_cache, debug):
    sra_ids <- READ non-empty trimmed lines from id_file
    total <- LENGTH of sra_ids
    success_count <- 0

    FOR EACH sra_id IN sra_ids:
        PRINT "[INFO] Processing sra_id..."

        success <- download_sra(sra_id, sra_cache, debug)
        IF NOT success:
            PRINT "[WARNING] Failed to download sra_id. Skipping."
            CONTINUE

        success <- extract_fastq(sra_id, sra_cache, download_directory, debug)
        IF success:
            INCREMENT success_count

    PRINT "[INFO] Summary: Total = total, Successfully extracted FASTQ = success_count"


FUNCTION download_sra(sra_id, sra_cache, debug):
    cache_dir <- sra_cache OR get_default_cache_dir()
    ENSURE cache_dir exists
    command <- "prefetch --output-directory cache_dir sra_id"
    RETURN run_command(command, debug)


FUNCTION extract_fastq(sra_id, sra_cache, download_directory, debug):
    sra_file <- locate_sra_file(sra_id, sra_cache)
    IF sra_file DOES NOT exist:
        PRINT "[WARNING] SRA file not found after download"
        RETURN FALSE

    output_dir <- download_directory + "/" + sra_id + "/FASTQ"
    ENSURE output_dir exists

    command <- "fasterq-dump --split-files --outdir output_dir sra_file"
    RETURN run_command(command, debug)


FUNCTION locate_sra_file(sra_id, sra_cache):
    cache_dir <- sra_cache OR get_default_cache_dir()
    expected_path <- cache_dir + "/" + sra_id + ".sra"
    alternate_path <- cache_dir + "/" + sra_id + "/" + sra_id + ".sra"

    IF expected_path EXISTS:
        RETURN expected_path
    ELSE IF alternate_path EXISTS:
        RETURN alternate_path
    ELSE:
        RETURN NULL


FUNCTION get_default_cache_dir():
    RETURN ENV["COURSE_HOME"] + "/NCBI/public/sra" IF EXISTS
           ELSE "~/.ncbi/public/sra"


FUNCTION run_command(command, debug):
    IF debug:
        PRINT "[DEBUG] Executing command"
    EXECUTE shell command
    RETURN TRUE if exit code = 0, else FALSE


FUNCTION ensure_directory_exists(path):
    IF path does not exist:
        CREATE path
"""

########################################################################
#...Code generated by Grimoire:
#!/usr/bin/env python

import argparse
import os
import subprocess
import sys

def print_info(message):
    print(f"[INFO] {message}", file=sys.stderr)

def print_debug(message, debug):
    if debug:
        print(f"[DEBUG] {message}", file=sys.stderr)

def ensure_directory_exists(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

def run_command(command, debug):
    print_debug(f"Executing command: {command}", debug)
    result = subprocess.run(command, shell=True, stdout=sys.stdout, stderr=sys.stderr)
    return result.returncode == 0

def get_default_cache_dir():
    return os.path.join(os.environ.get("COURSE_HOME", os.path.expanduser("~")), "NCBI", "public", "sra")

def locate_sra_file(sra_id, cache_dir):
    cache_dir = cache_dir or get_default_cache_dir()
    expected_sra_file = os.path.join(cache_dir, f"{sra_id}.sra")
    alt_sra_file = os.path.join(cache_dir, sra_id, f"{sra_id}.sra")
    if os.path.exists(expected_sra_file):
        return expected_sra_file
    elif os.path.exists(alt_sra_file):
        return alt_sra_file
    else:
        return None

def download_sra(sra_id, cache_dir, debug):
    cache_dir = cache_dir or get_default_cache_dir()
    ensure_directory_exists(cache_dir)
    command = f"prefetch --output-directory {cache_dir} {sra_id}"
    return run_command(command, debug)

def extract_fastq(sra_id, cache_dir, download_dir, debug):
    sra_file = locate_sra_file(sra_id, cache_dir)
    if not sra_file:
        print(f"[WARNING] SRA file for {sra_id} not found after prefetch.", file=sys.stderr)
        return False

    fastq_out_dir = os.path.join(download_dir, sra_id, "FASTQ")
    ensure_directory_exists(fastq_out_dir)

    cmd = f"fasterq-dump --split-files --outdir {fastq_out_dir} {sra_file}"
    success = run_command(cmd, debug)

    if not success:
        print(f"[WARNING] fasterq-dump failed for {sra_id}.", file=sys.stderr)
        return False

    print_info(f"FASTQ extracted to {fastq_out_dir}")
    return True

def process_sra_list(id_file, download_dir, cache_dir, debug):
    with open(id_file, "r") as file:
        sra_ids = [line.strip() for line in file if line.strip()]

    total = len(sra_ids)
    success_count = 0

    for sra_id in sra_ids:
        print_info(f"Processing {sra_id}...")

        if not download_sra(sra_id, cache_dir, debug):
            print(f"[WARNING] Failed to download {sra_id}. Skipping.", file=sys.stderr)
            continue

        if extract_fastq(sra_id, cache_dir, download_dir, debug):
            success_count += 1

    print_info(f"Summary: Total: {total}, Successfully extracted FASTQ: {success_count}")

def main():
    parser = argparse.ArgumentParser(description="Download and extract FASTQ files from SRA.")
    parser.add_argument("-i", "--id-file", required=True, help="File with list of SRA IDs.")
    parser.add_argument("-d", "--download-directory", required=True, help="Directory for FASTQ outputs.")
    parser.add_argument("-c", "--sra-cache", help="Cache dir for downloaded .sra files.")
    parser.add_argument("-D", "--Debug", action="store_true", help="Enable debug output.")
    args = parser.parse_args()
    process_sra_list(args.id_file, args.download_directory, args.sra_cache, args.Debug)

if __name__ == "__main__":
    main()
