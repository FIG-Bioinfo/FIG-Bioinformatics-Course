#!/usr/bin/env python

import argparse
import re
import sys

def main():
    parser = argparse.ArgumentParser(description='Convert FASTQ to FASTA format')

    parser.add_argument('-i', '--input_file', type=str, required=False, help='Path to an input file to be read')
    parser.add_argument('-o', '--output_file', type=str, required=False, help='Path to an output file to be created')
    parser.add_argument('-d', '--detect_direction', action='store_true', help='Auto-detect mate pair direction')
    parser.add_argument('-w', '--width', type=int, required=False, help='Defines the width of FASTA sequence lines')
    args = parser.parse_args()

    # Use STDIN if no input file is provided
    input_stream = sys.stdin if args.input_file is None else open(args.input_file, 'r')
    # Use STDOUT if no output file is provided
    output_stream = sys.stdout if args.output_file is None else open(args.output_file, 'wt')
    
    line_count = 0
    record_count = 0
    last_header = ""
    dot_count = 0  # Track dots printed in the current row
    
    for line in input_stream:
        line = line.strip()
        line_count += 1

        if line_count % 4 == 1:  # Header line
            record_count += 1
            
            if record_count % 1_000_000 == 0:
                sys.stderr.write(".")
                dot_count += 1
                if dot_count == 100:
                    sys.stderr.write("\n")
                    dot_count = 0
                sys.stderr.flush()
            
            if args.detect_direction:
                m = re.search(r'^@(\S+?)[ .](1|2)(\s+(.*))?$', line)
                if m:
                    read_id = m.group(1)  # Base read ID
                    pair_suffix = m.group(2) if m.group(2) else ""  # Paired-end indicator
                    metadata = m.group(4) if m.group(4) else ""  # Remaining metadata
                    last_header = f">{read_id}{'/' + pair_suffix if pair_suffix else ''} {metadata}".strip()
                else:
                    raise Exception(f"ERROR: FASTQ header line didn't match expected format: {line}")
            else:
                last_header = f">{line[1:]}"  # Remove leading '@' properly
        
        elif line_count % 4 == 2:  # Sequence line
            if args.width:
                output_stream.write(f"{last_header}\n{wrapped(line, args.width)}\n")
            else:
                output_stream.write(f"{last_header}\n{line}\n")
    
    # Print a final newline if the last row of dots wasn't already a complete row
    if dot_count > 0:
        sys.stderr.write("\n")
    
    # Close file handles if files were opened
    if args.input_file is not None:
        input_stream.close()
    if args.output_file is not None:
        output_stream.close()
    
    print(f"{record_count} records written to the output FASTA file", file=sys.stderr)

def wrapped(string, every=60):
    string = string.rstrip()
    return '\n'.join(string[i:i+every] for i in range(0, len(string), every))

if __name__ == '__main__':
    main()
