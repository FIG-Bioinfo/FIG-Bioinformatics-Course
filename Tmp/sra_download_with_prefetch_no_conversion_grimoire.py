########################################################################
#...Prompt that generated this program:
"""
Please write a Python script named `sra_fastq_download.py` that performs the following:

- Accepts the following command-line arguments:
  - `-i` or `--id-file` (required): Path to a text file containing a list of SRA IDs (one per line)
  - `-d` or `--download-directory` (required): Directory where extracted FASTQ files should be stored
  - `-c` or `--sra-cache` (optional): Directory to cache `.sra` files. If not specified, use the environment variable `COURSE_HOME`, falling back to `~/NCBI/public/sra`
  - `-D` or `--Debug` (optional flag): Print debug messages to STDERR

Behavior:

1. For each SRA ID:
   - Download the `.sra` file using `prefetch` into the cache directory
   - Extract the `.sra` file using `fasterq-dump` into:
     {download_directory}/{sra_id}/FASTQ/
   - If `fasterq-dump` fails, skip and print a warning
   - Create any missing output directories as needed

2. Print all `[INFO]` messages to STDERR
3. If debug is enabled, also print `[DEBUG]` messages showing the shell commands executed
4. After processing all SRA IDs, print a summary showing:
   - Total SRA IDs requested
   - Number of successful FASTQ extractions

Implementation constraints:

- Use `subprocess.run()` to call both `prefetch` and `fasterq-dump`
- Use `os.environ.get("COURSE_HOME", os.path.expanduser("~"))` to determine the default SRA cache path if `--sra-cache` is not specified
- Do not convert to FASTA or delete `.sra` files
- The script must be production-ready, modular, and runnable like this:

  ```bash
  python sra_fastq_download.py -i my_ids.txt -d ./outputs
  ```
"""

########################################################################
#...Pseudocode for this program:
"""
FUNCTION log_info(message):
    PRINT "[INFO] " + message TO STDERR

FUNCTION log_debug(message, debug):
    IF debug IS TRUE:
        PRINT "[DEBUG] " + message TO STDERR

FUNCTION run_command(command_list, debug):
    CALL log_debug("Running command: " + JOIN(command_list, " "), debug)
    RUN command_list AS subprocess
    RETURN result

FUNCTION ensure_dir(path):
    CREATE path AND ANY PARENT DIRECTORIES IF NOT EXISTS

FUNCTION main():
    PARSE command-line arguments:
        - REQUIRED: --id-file (-i)
        - REQUIRED: --download-directory (-d)
        - OPTIONAL: --sra-cache (-c)
        - OPTIONAL FLAG: --Debug (-D)

    SET debug = value of --Debug flag

    SET id_file = Path from --id-file
    IF id_file DOES NOT EXIST:
        CALL log_info("SRA ID file not found: " + id_file)
        EXIT PROGRAM WITH ERROR

    SET download_dir = Path from --download-directory
    CALL ensure_dir(download_dir)

    IF --sra-cache IS PROVIDED:
        SET sra_cache = Path from --sra-cache
    ELSE:
        SET sra_cache = ENV_VAR("COURSE_HOME") OR DEFAULT TO HOME_DIR/NCBI/public/sra
    CALL ensure_dir(sra_cache)

    READ sra_ids FROM id_file, IGNORE EMPTY LINES

    SET total_ids = COUNT of sra_ids
    SET success_count = 0

    FOR EACH sra_id IN sra_ids:
        CALL log_info("Processing SRA ID: " + sra_id)

        SET prefetch_cmd = ["prefetch", "-O", sra_cache, sra_id]
        SET prefetch_result = CALL run_command(prefetch_cmd, debug)
        IF prefetch_result FAILED:
            CALL log_info("Failed to prefetch " + sra_id + ". Skipping.")
            CONTINUE TO NEXT sra_id

        SET fastq_output_dir = download_dir / sra_id / "FASTQ"
        CALL ensure_dir(fastq_output_dir)

        SET sra_file_path = sra_cache / sra_id / (sra_id + ".sra")

        SET fasterq_cmd = ["fasterq-dump", sra_file_path, "-O", fastq_output_dir]
        SET fasterq_result = CALL run_command(fasterq_cmd, debug)
        IF fasterq_result FAILED:
            CALL log_info("fasterq-dump failed for " + sra_id + ". Skipping.")
            CONTINUE TO NEXT sra_id

        INCREMENT success_count
        CALL log_info("Successfully processed " + sra_id)

    CALL log_info("----- Summary -----")
    CALL log_info("Total SRA IDs requested: " + total_ids)
    CALL log_info("Number of successful FASTQ extractions: " + success_count)

IF THIS FILE IS RUN AS MAIN SCRIPT:
    CALL main()
"""

########################################################################
#...Code generated by Grimoire:
import os
import sys
import argparse
import subprocess
from pathlib import Path

def log_info(message):
    print(f"[INFO] {message}", file=sys.stderr)

def log_debug(message, debug):
    if debug:
        print(f"[DEBUG] {message}", file=sys.stderr)

def run_command(cmd_list, debug):
    log_debug(f"Running command: {' '.join(cmd_list)}", debug)
    result = subprocess.run(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return result

def ensure_dir(path):
    Path(path).mkdir(parents=True, exist_ok=True)

def main():
    parser = argparse.ArgumentParser(description="Download and extract SRA FASTQ files")
    parser.add_argument('-i', '--id-file', required=True, help="File with list of SRA IDs")
    parser.add_argument('-d', '--download-directory', required=True, help="Output directory for FASTQ files")
    parser.add_argument('-c', '--sra-cache', help="Directory to cache .sra files")
    parser.add_argument('-D', '--Debug', action='store_true', help="Enable debug output")
    args = parser.parse_args()

    debug = args.Debug

    id_file = Path(args.id_file)
    if not id_file.exists():
        log_info(f"SRA ID file not found: {id_file}")
        sys.exit(1)

    download_dir = Path(args.download_directory)
    ensure_dir(download_dir)

    sra_cache = Path(args.sra_cache) if args.sra_cache else Path(os.environ.get("COURSE_HOME", os.path.expanduser("~/NCBI/public/sra")))
    ensure_dir(sra_cache)

    with open(id_file, 'r') as f:
        sra_ids = [line.strip() for line in f if line.strip()]

    total_ids = len(sra_ids)
    success_count = 0

    for sra_id in sra_ids:
        log_info(f"Processing SRA ID: {sra_id}")

        # Download with prefetch
        prefetch_cmd = ['prefetch', '-O', str(sra_cache), sra_id]
        prefetch_result = run_command(prefetch_cmd, debug)

        if prefetch_result.returncode != 0:
            log_info(f"Failed to prefetch {sra_id}. Skipping.")
            continue

        # Define output directory
        fastq_output_dir = download_dir / sra_id / "FASTQ"
        ensure_dir(fastq_output_dir)

        sra_file_path = sra_cache / sra_id / f"{sra_id}.sra"

        # Run fasterq-dump
        fasterq_cmd = ['fasterq-dump', str(sra_file_path), '-O', str(fastq_output_dir)]
        fasterq_result = run_command(fasterq_cmd, debug)

        if fasterq_result.returncode != 0:
            log_info(f"fasterq-dump failed for {sra_id}. Skipping.")
            continue

        success_count += 1
        log_info(f"Successfully processed {sra_id}")

    log_info("----- Summary -----")
    log_info(f"Total SRA IDs requested: {total_ids}")
    log_info(f"Number of successful FASTQ extractions: {success_count}")

if __name__ == '__main__':
    main()
