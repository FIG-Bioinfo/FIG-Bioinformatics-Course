######################################################################
#...Prompt that generated this program:
"""
Please write a Python program that will:
* read a tab-separated-value data-file with header-line from STDIN
* print the field-names in that TSV-file's header-line columns to STDOUT, and then exit
* any error-messages should be printed to STDERR.
"""
######################################################################
#...Pseudocode for this program:
"""
function main:
    try:
        # Read the TSV input from STDIN
        reader = initialize CSV reader using STDIN with tab ('\t') delimiter

        # Retrieve the first row (header line) from the TSV input
        header = get next row from reader

        # Print the header fields to STDOUT, joined by tabs
        print join header fields with tab ('\t') and output to STDOUT

    catch CSV error as e:
        # If a CSV processing error occurs, print the error message to STDERR
        print "Error processing CSV file: " + error message e to STDERR

    catch general error as e:
        # Handle any other exceptions by printing to STDERR
        print "An error occurred: " + error message e to STDERR

if __name__ == "main":
    call main
"""
######################################################################
#...Program generated by Grimoire:
import sys # Import sys for command-line arguments
import csv # Import csv for reading CSV files
import argparse # Import argparse for parsing command-line arguments

def main():
    # Set up argument parser
    parser = argparse.ArgumentParser(description='Process TSV headers.')
    parser.add_argument('-i', '--input', required=True, help='Input data file name')
    parser.add_argument('-s', '--search', type=str, help='Keyword to search for in header names')
    parser.add_argument('-n', '--number', type=int, help='Total number of selected columns to print')
    
    args = parser.parse_args()

    try:
        # Read the input file
        with open(args.input, 'r') as file:
            reader = csv.reader(file, delimiter='\t')
            header = next(reader)  # Extract the header names
            
            # Select columns based on search keyword
            if args.search:
                selected_columns = [col for col in header if args.search.lower() in col.lower()]
            else:
                selected_columns = header  # If no search keyword, select all columns
            
            # Limit the number of selected columns if specified
            if args.number is not None:
                selected_columns = selected_columns[:args.number]
        
            # Print the selected columns
            print('\t'.join(selected_columns))

    
    except csv.Error as e:
        # Print error message to STDERR
        print(f"Error processing CSV file: {e}", file=sys.stderr)
    except Exception as e:
        # Handle other errors and print them to STDERR
        print(f"An error occurred: {e}", file=sys.stderr)

if __name__ == "__main__":
    main()
