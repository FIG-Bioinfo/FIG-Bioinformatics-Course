########################################################################
#...Prompt that generated this program:
"""
Please write a program named translate_DNA.py that:
* Does not make use of any deprecated modules,
* accepts an optional translation-table-number argument, with default-value '11',
* reads a set of FASTA-encoded DNA sequences from STDIN using BioPython SeqIO
 and standardizes their case,
* Uses BioPython's Seq.translate() method to translate the entire DNA sequence
 to protein using the specified translation table, stopping at the first STOP codon,
* uses SeqIO to write each translated sequence in nicely-formatted FASTA to STDOUT,
 with exactly the same sequence-description as in the input record.

Please also get the list of valid START codons for the specified translation-table
from BioPython, and ensure that these START-codons are correctly translated to 'M'
when they are in the initial position.
"""
########################################################################
#...Pseudocode for this program:
"""
# Pseudocode for translate_DNA.py

FUNCTION translate_sequence(record, table_id):
    # Get the translation table using the specified table_id
    table = GET_CODON_TABLE_BY_ID(table_id)
    
    # Standardize DNA sequence case to uppercase
    dna_seq = CONVERT_TO_UPPERCASE(record.seq)

    # Retrieve valid start codons for the specified table
    start_codons = GET_START_CODONS(table)

    # Translate DNA sequence into protein, stopping at the first STOP codon
    protein_seq = TRANSLATE_DNA_TO_PROTEIN(dna_seq, table_id, STOP_AT_FIRST_STOP=True)

    # If the first codon is a valid start codon, translate it to Methionine (M)
    IF dna_seq[0:3] IS_IN start_codons:
        protein_seq = "M" + REST_OF(protein_seq)

    RETURN protein_seq
END FUNCTION

FUNCTION main():
    # Parse command-line arguments for the translation table number (default to 11)
    args = PARSE_ARGUMENTS(DEFAULT_TABLE=11)

    # Read FASTA-encoded DNA sequences from standard input
    fasta_input = READ_FASTA_FROM_STDIN()

    # Loop through each DNA sequence record in the FASTA input
    FOR EACH record IN fasta_input:
        # Translate the DNA sequence to a protein sequence
        protein_seq = translate_sequence(record, args.table)
        
        # Replace the DNA sequence with the translated protein sequence
        record.seq = CONVERT_TO_SEQUENCE(protein_seq)
        
        # Write the translated sequence to standard output in FASTA format
        WRITE_FASTA_TO_STDOUT(record)
    END FOR
END FUNCTION

# Entry point
IF __name__ == "__main__":
    CALL main()
"""
########################################################################
#...Program generated by Grimoire:
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.Data import CodonTable
import sys
import argparse

def translate_sequence(record, table_id):
    # Get the translation table
    table = CodonTable.unambiguous_dna_by_id[table_id]

    # Standardize sequence case
    dna_seq = record.seq.upper()

    # Get the start codons for this table
    start_codons = set(table.start_codons)

    # Translate the sequence
    protein_seq = dna_seq.translate(table=table_id, to_stop=True)

    # Handle the translation of the start codon to Methionine (M)
    if dna_seq[:3] in start_codons:
        protein_seq = "M" + protein_seq[1:]

    return protein_seq

def main():
    # Argument parser to handle optional translation table number
    parser = argparse.ArgumentParser(description="Translate DNA sequences from FASTA to protein using Biopython.")
    parser.add_argument("-t", "--table", type=int, default=11, help="Translation table number (default is 11)")
    args = parser.parse_args()

    # Process FASTA sequences from STDIN
    fasta_input = SeqIO.parse(sys.stdin, "fasta")

    # Output translated sequences in FASTA format to STDOUT
    for record in fasta_input:
        protein_seq = translate_sequence(record, args.table)
        # Replace sequence in the record with translated protein sequence
        record.seq = Seq(protein_seq)
        # Write the record to stdout in FASTA format
        SeqIO.write(record, sys.stdout, "fasta")

if __name__ == "__main__":
    main()
