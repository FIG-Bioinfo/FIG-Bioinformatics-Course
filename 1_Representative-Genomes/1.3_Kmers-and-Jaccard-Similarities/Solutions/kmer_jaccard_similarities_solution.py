########################################################################
#...Prompt that generated this code:
"""
Please write a python program that:

* Takes a Kmer-length as a command-line argument,

* Uses BioPython to read a FASTA-formatted file from STDIN,

* Computes the number of Kmers in common and the jaccard-similarities for all pairs of sequences in the FASTA file,

* Prints the sequence-IDs, number of Kmers in common, and the jaccard-similarities to STDOUT in tab-separated format if the number of Kmers in common is not zero,

* Prints the number of pairs and the number of pairs with nonzero similarity to STDERR
"""
########################################################################
#...Pseudocode for this program:
"""
# Pseudocode for K-mer Similarity Program

BEGIN program

    FUNCTION generate_kmers(sequence, k):
        RETURN set of all substrings of length k from sequence

    FUNCTION compute_jaccard_and_common_kmers(seq1, seq2, k):
        kmers1 ← generate_kmers(seq1, k)
        kmers2 ← generate_kmers(seq2, k)

        common_kmers ← intersection of kmers1 and kmers2
        union_kmers ← union of kmers1 and kmers2

        IF union_kmers is not empty:
            jaccard_similarity ← size of common_kmers / size of union_kmers
        ELSE:
            jaccard_similarity ← 0

        RETURN size of common_kmers, jaccard_similarity

    MAIN:
        IF command-line argument count is not 2:
            PRINT "Usage: <script> <kmer-length>" to STDERR
            EXIT with status 1

        TRY:
            k ← convert second argument to integer
        CATCH ValueError:
            PRINT "Kmer-length must be an integer." to STDERR
            EXIT with status 1

        sequences ← parse FASTA sequences from STDIN
        total_pairs ← 0
        nonzero_pairs ← 0

        FOR each unique pair (seq1, seq2) in combinations(sequences, 2):
            total_pairs ← total_pairs + 1
            common_kmers, jaccard ← compute_jaccard_and_common_kmers(seq1.sequence, seq2.sequence, k)

            IF common_kmers > 0:
                nonzero_pairs ← nonzero_pairs + 1
                PRINT seq1.id, seq2.id, common_kmers, jaccard to STDOUT (tab-separated)

        PRINT "Total pairs:", total_pairs to STDERR
        PRINT "Pairs with nonzero similarity:", nonzero_pairs to STDERR

    END MAIN

IF __name__ == "__main__":
    CALL MAIN

END program
"""
########################################################################
#...Code generated by Grimoire:
import sys
from itertools import combinations
from Bio import SeqIO

def kmer_set(sequence, k):
    """Return a set of k-mers from the sequence."""
    return {sequence[i:i+k] for i in range(len(sequence) - k + 1)}

def jaccard_similarity(set1, set2):
    """Calculate the Jaccard similarity between two sets."""
    intersection = set1 & set2
    union = set1 | set2
    return len(intersection), len(intersection) / len(union)

def main(k, fasta_file):
    # Parse the FASTA file
    sequences = [(record.id, str(record.seq)) for record in SeqIO.parse(fasta_file, "fasta")]
    
    # Calculate k-mer sets for each sequence
    kmer_sets = {seq_id: kmer_set(seq, k) for seq_id, seq in sequences}
    
    # Compare all pairs of sequences
    for (id1, seq1), (id2, seq2) in combinations(sequences, 2):
        set1, set2 = kmer_sets[id1], kmer_sets[id2]
        num_common, jaccard_sim = jaccard_similarity(set1, set2)
        print(f'{id1}\t{id2}\t{num_common}\t{jaccard_sim:.6f}')

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python kmer_jaccard_similarities.py <k> <fasta_file>")
        sys.exit(1)
    
    k = int(sys.argv[1])
    fasta_file = sys.argv[2]
    main(k, fasta_file)
