#########################################################
#  Prompt that generated this solution:
"""
Please write a python program named 'hammer_creator.py' that will:

* Accept as '-K' a mandatory integer Kmer-length command-line argument;
        
* Read a FASTA-formatted file from 'STDIN' using BioPython;
    
* The portion of the FASTA header up to the first whitespace-character is the
  "feature-ID" ('fid'). Please extract the feature-ID and build a dictionary
   mapping feature-IDs to sequences, after first converting the sequences to lower-case.

* Each feature-ID has the format 'fig|x.y.peg.z', where 'x', 'y', and 'z' are integers,
  and the 'fig|' and '.peg' portions are literal strings, not variables.
  The substring 'x.y' is the 'genome_id' for the sequence;
  please use a regular expression to extract the genome-ID from the feature-ID. 
    
* Find all of the Kmers that occur exactly once in exactly one 'genome_id';
  these Kmers are the "Hammers"

* Print a two column tab-separated table to 'STDOUT' of the hammers
  and the feature-ID that each hammer was found in, with column-headers
  of "hammer" and "fid".

* Finally, please print to 'STDERR' the number of sequences that were read,
  the number of Kmers that were processed, and the number of Kmers that were hammers,
  and then exit.
"""
#########################################################
# Pseudocode generated by this solution prompt:
"""
# Import necessary modules for handling system arguments, regular expressions, and biopython for FASTA parsing

DEFINE main
    # Setup argument parser for K-mer length
    PARSE argument -K as integer and STORE as variable k

    # Initialize counters and data structures
    SET sequence_count to 0
    SET kmers as an empty dictionary mapping K-mers to lists of feature-IDs and genome-IDs

    # Read FASTA-formatted DNA file from STDIN
    FOR each record in FASTA file from STDIN
        INCREMENT sequence_count by 1
        SET fid to first portion of record header (up to whitespace)

        # Extract genome-ID from fid using regular expression
        SET genome_id_match to regex match for pattern "fig|x.y.peg.z" in fid
        IF genome_id_match is None
            CONTINUE to next record

        SET genome_id to matched "x.y" part from genome_id_match
        SET sequence to lowercase version of record sequence

        # Iterate through each K-mer in the sequence
        FOR i from 0 to length of sequence - k + 1
            SET kmer to substring of sequence from i to i + k
            APPEND (fid, genome_id) to kmers[kmer]

    # Identify hammers from kmers
    SET hammers as empty dictionary
    SET kmer_count to 0
    SET hammer_count to 0

    FOR each kmer and its occurrences in kmers
        INCREMENT kmer_count by 1
        IF length of occurrences is 1
            SET fid, genome_id to the only element in occurrences
            IF kmer is not in hammers
                ADD kmer: fid to hammers
                INCREMENT hammer_count by 1

    # Print hammers to STDOUT
    PRINT "hammer\tfid" to STDOUT
    FOR each hammer and fid in hammers
        PRINT hammer and fid as tab-separated values to STDOUT

    # Print summary statistics to STDERR
    PRINT "Number of sequences read: sequence_count" to STDERR
    PRINT "Number of K-mers processed: kmer_count" to STDERR
    PRINT "Number of hammers: hammer_count" to STDERR

END main

# Run main function
IF script is executed as main program
    CALL main
"""
#########################################################
# Code generated by this solution prompt:

import sys
import re
import argparse
from collections import defaultdict
from Bio import SeqIO

def main():
    # Argument parser setup for K-mer length
    parser = argparse.ArgumentParser(description="Generate hammers from a FASTA file.")
    parser.add_argument("-K", type=int, required=True, help="Length of K-mer")
    args = parser.parse_args()

    # Variables to store data
    k = args.K
    sequence_count = 0
    kmers = defaultdict(list)  # Dictionary to map K-mers to a list of feature-IDs and genome-IDs

    # Read FASTA file from stdin
    fasta_sequences = SeqIO.parse(sys.stdin, "fasta")

    for record in fasta_sequences:
        sequence_count += 1
        fid = record.id.split()[0]  # Extract feature-ID from the FASTA header
        genome_id_match = re.match(r"fig\|(\d+\.\d+)\.peg\.\d+", fid)

        if not genome_id_match:
            continue  # Skip if the feature-ID does not match the required format

        genome_id = genome_id_match.group(1)
        sequence = str(record.seq).lower()

        # Find all K-mers in the sequence
        for i in range(len(sequence) - k + 1):
            kmer = sequence[i:i + k]
            kmers[kmer].append((fid, genome_id))

    # Identify hammers
    hammers = {}
    kmer_count = 0
    hammer_count = 0

    for kmer, occurrences in kmers.items():
        kmer_count += 1
        if len(occurrences) == 1:  # Kmer occurs only once in one genome
            fid, genome_id = occurrences[0]
            if kmer not in hammers:
                hammers[kmer] = fid
                hammer_count += 1

    # Print hammers to STDOUT
    print("hammer\tfid")
    for hammer, fid in hammers.items():
        print(f"{hammer}\t{fid}")

    # Print summary to STDERR
    sys.stderr.write(f"Number of sequences read: {sequence_count}\n")
    sys.stderr.write(f"Number of K-mers processed: {kmer_count}\n")
    sys.stderr.write(f"Number of hammers: {hammer_count}\n")

if __name__ == "__main__":
    main()
