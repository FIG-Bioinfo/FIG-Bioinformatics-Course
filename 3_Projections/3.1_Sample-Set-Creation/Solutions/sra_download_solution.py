########################################################################
#...Prompt that generated this program:
"""
Assuming that the SRA toolkit is installed in the user's path,
please write a Python script named 'sra_download.py'
that takes the following named inputs:

* -i or --id-file --- Name of a file containing a list of SRA-IDs in its first column.

* -o or --output-directory --- name of an output directory to write fetched data-files to.

Foreach SRA-ID, the script should print a message to STDERR
indicating that it is fetching that SRA-ID,
then use the SRA-toolkit to fetch the FASTQ or FASTA file associated
with that SRA-ID, and finally print a message to STDERR indicating
the size of the downloaded file, whether it was FASTQ or FASTA,
and whether it was single-ended or paired-end if the download
was successful, else a warning-message if the download failed.

Next, if the download was successful, and if the SRA-entry
is a set of paired-end reads, the script should used SRA-tools
to split the FASTQ file into left and right reads.

Finally, the script should print to STDERR the number of SRA-entries
requested, the number of entries where the download succeeded,
and the numbers of single-ended and paired-end entries downloaded.
"""

########################################################################
#...Pseudocode for this program:
"""
FUNCTION parse_arguments():
    CREATE parser AS ArgumentParser
    ADD argument "-i" OR "--id-file" (required, help="File containing a list of SRA IDs.")
    ADD argument "-o" OR "--output-directory" (required, help="Directory to store downloaded files.")
    RETURN parsed arguments

FUNCTION download_sra(sra_id, output_dir):
    SET output_path TO output_dir + "/" + sra_id + ".fastq"
    SET stderr_prefix TO "[SRA " + sra_id + "] "

    PRINT stderr_prefix + "Fetching " + sra_id TO STDERR

    TRY:
        SET command TO ["fastq-dump", "--split-files", "--gzip", "--outdir", output_dir, sra_id]
        RUN command WITH subprocess, capturing output

        IF command execution fails:
            PRINT stderr_prefix + "WARNING: Failed to download " + sra_id TO STDERR
            RETURN (None, None)

        CHECK if single-end or paired-end:
            IF output_dir contains sra_id + ".fastq.gz":
                SET single_end TO TRUE
            ELSE IF output_dir contains sra_id + "_1.fastq.gz" AND output_dir contains sra_id + "_2.fastq.gz":
                SET paired_end TO TRUE

        CALCULATE file size:
            SET file_size TO 0
            IF single_end:
                SET file_path TO output_dir + "/" + sra_id + ".fastq.gz"
                SET file_size TO size of file_path
            ELSE IF paired_end:
                SET file_path_1 TO output_dir + "/" + sra_id + "_1.fastq.gz"
                SET file_path_2 TO output_dir + "/" + sra_id + "_2.fastq.gz"
                SET file_size TO size of file_path_1 + size of file_path_2

        PRINT stderr_prefix + "Downloaded " + sra_id + " (" + ("Single-end" IF single_end ELSE "Paired-end") + "), Size: " + (file_size / 1024) + " KB" TO STDERR

        RETURN (file_size, "Paired" IF paired_end ELSE "Single")

    CATCH EXCEPTION AS e:
        PRINT stderr_prefix + "ERROR: " + e TO STDERR
        RETURN (None, None)

FUNCTION main():
    SET args TO parse_arguments()
    CREATE output_directory IF NOT EXISTS

    READ args.id_file INTO sra_ids (strip whitespace, extract first column)
    
    SET total_entries TO LENGTH of sra_ids
    SET success_count TO 0
    SET single_count TO 0
    SET paired_count TO 0

    FOR EACH sra_id IN sra_ids:
        SET (file_size, read_type) TO download_sra(sra_id, args.output_directory)
        IF file_size IS NOT None:
            INCREMENT success_count
            IF read_type IS "Paired":
                INCREMENT paired_count
            ELSE:
                INCREMENT single_count

    PRINT "Summary: Requested " + total_entries + ", Downloaded " + success_count + ", Single-end " + single_count + ", Paired-end " + paired_count TO STDERR

IF __name__ == "__main__":
    CALL main()
"""

########################################################################
#...Code generated by Grimoire:
import os
import sys
import argparse
import subprocess

def parse_arguments():
    parser = argparse.ArgumentParser(description="Download SRA files and process them.")
    parser.add_argument("-i", "--id-file", required=True, help="File containing a list of SRA IDs.")
    parser.add_argument("-o", "--output-directory", required=True, help="Directory to store downloaded files.")
    return parser.parse_args()

def download_sra(sra_id, output_dir):
    output_path = os.path.join(output_dir, f"{sra_id}.fastq")
    stderr_prefix = f"[SRA {sra_id}] "
    
    sys.stderr.write(f"{stderr_prefix}Fetching {sra_id}...\n")
    
    try:
        # Download the SRA file as FASTQ
        command = ["fastq-dump", "--split-files", "--gzip", "--outdir", output_dir, sra_id]
        result = subprocess.run(command, capture_output=True, text=True)
        
        if result.returncode != 0:
            sys.stderr.write(f"{stderr_prefix}WARNING: Failed to download {sra_id}\n")
            return None, None

        # Check if single-end or paired-end
        single_end = os.path.exists(os.path.join(output_dir, f"{sra_id}.fastq.gz"))
        paired_end = (os.path.exists(os.path.join(output_dir, f"{sra_id}_1.fastq.gz")) and
                      os.path.exists(os.path.join(output_dir, f"{sra_id}_2.fastq.gz")))
        
        # Get file sizes
        file_size = 0
        if single_end:
            file_path = os.path.join(output_dir, f"{sra_id}.fastq.gz")
            file_size = os.path.getsize(file_path)
        elif paired_end:
            file_path_1 = os.path.join(output_dir, f"{sra_id}_1.fastq.gz")
            file_path_2 = os.path.join(output_dir, f"{sra_id}_2.fastq.gz")
            file_size = os.path.getsize(file_path_1) + os.path.getsize(file_path_2)
        
        sys.stderr.write(f"{stderr_prefix}Downloaded {sra_id} ({'Single-end' if single_end else 'Paired-end'}), Size: {file_size / 1024:.2f} KB\n")
        
        return file_size, "Paired" if paired_end else "Single"
    
    except Exception as e:
        sys.stderr.write(f"{stderr_prefix}ERROR: {e}\n")
        return None, None

def main():
    args = parse_arguments()
    os.makedirs(args.output_directory, exist_ok=True)
    
    with open(args.id_file, 'r') as f:
        sra_ids = [line.strip().split()[0] for line in f if line.strip()]
    
    total_entries = len(sra_ids)
    success_count = 0
    single_count = 0
    paired_count = 0
    
    for sra_id in sra_ids:
        file_size, read_type = download_sra(sra_id, args.output_directory)
        if file_size:
            success_count += 1
            if read_type == "Paired":
                paired_count += 1
            else:
                single_count += 1
    
    sys.stderr.write(f"Summary: Requested {total_entries}, Downloaded {success_count}, Single-end {single_count}, Paired-end {paired_count}\n")

if __name__ == "__main__":
    main()
